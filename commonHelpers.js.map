{"version":3,"file":"commonHelpers.js","sources":["../src/main.js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userDate;\nlet intervalTime;\nconst dataInputTime = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector(`button`);\nconst showTime= document.querySelector(`.value`);\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    // console.log(selectedDates[0]);\n    userDate = selectedDates[0];\n    intervalTime= userSelectedDate - options.defaultDate;\n\n    if (intervalTime < 1) {\n      iziToast.error({\n        color: 'red',\n        position: 'topRight',\n        message: `Please choose a date in the future`,\n      });\n    } else {\n      startBtn.disabled = false;\n      inputTime.disabled = true;\n    }\n  },\n};\n\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n//   console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//   console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n//   console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n  \nstartBtn.disabled = true;\nstartBtn.addEventListener('click', event => {\n  const repeatTime = setInterval(() => {\n    intervalTime = userDate - new Date();\n    event.preventDefault();\n    dataInputTime.disabled = true;\n\n    if (timeInterval < 1) {\n      startBtn.disabled = true;\n      dataInputTime .disabled = false;\n      clearInterval(repeatTime);\n      return;\n    };\n    console.log(showTime);\n    const timer = convertMs(timeInterval);\n\n    showTime[0].innerText = timer.days.toString().padStart(2, '0');\n    showTime[1].innerText = timer.hours.toString().padStart(2, '0');\n    showTime[2].innerText = timer.minutes.toString().padStart(2, '0');\n    showTime[3].innerText = timer.seconds.toString().padStart(2, '0');\n  }, 1000);\n});"],"names":["dataInputTime","startBtn","showTime","convertMs","ms","days","hours","minutes","seconds","event","repeatTime","timer"],"mappings":"4HAQA,MAAMA,EAAgB,SAAS,cAAc,kBAAkB,EACzDC,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAU,SAAS,cAAc,QAAQ,EAyB/C,SAASC,EAAUC,EAAI,CAQnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAOHP,EAAS,SAAW,GACpBA,EAAS,iBAAiB,QAASQ,GAAS,CAC1C,MAAMC,EAAa,YAAY,IAAM,CAKnC,GAHAD,EAAM,eAAc,EACpBT,EAAc,SAAW,GAErB,aAAe,EAAG,CACpBC,EAAS,SAAW,GACpBD,EAAe,SAAW,GAC1B,cAAcU,CAAU,EACxB,MACN,CACI,QAAQ,IAAIR,CAAQ,EACpB,MAAMS,EAAQR,EAAU,YAAY,EAEpCD,EAAS,CAAC,EAAE,UAAYS,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC7DT,EAAS,CAAC,EAAE,UAAYS,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC9DT,EAAS,CAAC,EAAE,UAAYS,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAChET,EAAS,CAAC,EAAE,UAAYS,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CACjE,EAAE,GAAI,CACT,CAAC"}